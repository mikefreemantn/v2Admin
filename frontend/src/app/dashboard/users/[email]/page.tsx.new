'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { 
  AlertCircle, 
  Loader2, 
  ArrowLeft,
  ChevronRight,
  Copy,
  Coins,
  CalendarDays,
  Clock,
  Key,
  Edit,
  Plus,
  Save,
  X
} from 'lucide-react';
import { Label } from '@/components/ui/label';
import { getCurrentUser } from 'aws-amplify/auth';
import { configureAmplifyClient } from '@/lib/amplifyClient';
import { Button } from '@/components/ui/button';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Badge } from "@/components/ui/badge";
import { format } from 'date-fns';
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { useToast } from "@/components/ui/use-toast";

// API key for accessing the ReIntent API
const API_KEY = 'ri_5437c19aa7de';
const API_BASE_URL = 'https://xwkwzbjifh.execute-api.us-east-2.amazonaws.com/v1';

// Number of items per page for credit history pagination
const ITEMS_PER_PAGE = 10;

// User type definition
interface User {
  user_id: string;
  email: string;
  access_key: string;
  allow_multiple_domains: boolean;
  created_at: number;
  updated_at: number;
  plan_type: string;
  status: string;
  credits: number;
  stripe_customer_id?: string;
}

// Domain usage type definition
interface DomainUsage {
  users: {
    user_id: string;
    email: string;
    access_key: string;
    domains: string[];
    domain_count: number;
    status: string;
    allow_multiple_domains: boolean;
  }[];
  domain_counts: {
    [domain: string]: number;
  };
}

// Credit transaction type definition
interface CreditTransaction {
  service: string;
  user_id: string;
  action_type: string;
  status: string;
  timestamp: number;
  amount: number;
  source_domain: string;
  date: string;
}

export default function UserProfilePage({ params }: { params: { email: string } }) {
  const router = useRouter();
  const [user, setUser] = useState<User | null>(null);
  const [domainUsage, setDomainUsage] = useState<DomainUsage | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreditDialog, setShowCreditDialog] = useState(false);
  const [creditAmount, setCreditAmount] = useState(10);
  const [isAddingCredits, setIsAddingCredits] = useState(false);
  
  // Function to get styles for different plan types
  const getPlanTypeStyles = (planType: string): string => {
    switch (planType?.toLowerCase() || 'free') {
      case 'credit_based':
        return 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400';
      case 'subscription':
        return 'bg-violet-100 dark:bg-violet-900/30 text-violet-700 dark:text-violet-400';
      case 'free':
        return 'bg-slate-100 dark:bg-slate-900/30 text-slate-700 dark:text-slate-400';
      case 'enterprise':
        return 'bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400';
      default:
        return 'bg-gray-100 dark:bg-gray-900/30 text-gray-700 dark:text-gray-400';
    }
  };
  
  // Edit user state
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [editedUser, setEditedUser] = useState<Partial<User>>({});
  const [isUpdatingUser, setIsUpdatingUser] = useState(false);
  
  // Get toast function
  const { toast } = useToast();

  // Credit history state
  const [creditHistory, setCreditHistory] = useState<CreditTransaction[]>([]);
  const [isLoadingCreditHistory, setIsLoadingCreditHistory] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  
  // Decode the email from URL
  const decodedEmail = decodeURIComponent(params.email);

  // Check authentication and fetch user data
  useEffect(() => {
    const checkAuth = async () => {
      try {
        await configureAmplifyClient();
        await getCurrentUser();
        
        // Fetch user data
        await fetchUserData(decodedEmail);
      } catch (err) {
        console.error('Authentication error:', err);
        router.push('/login');
      } finally {
        setLoading(false);
      }
    };
    
    checkAuth();
  }, [decodedEmail, router]);
  
  // Fetch user data from API
  const fetchUserData = async (email: string) => {
    try {
      setLoading(true);
      console.log('Fetching user data for email:', email);
      
      // Use proxy endpoint to avoid CORS issues with the correct admin endpoint
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users`,
          method: 'GET',
          params: { api_key: API_KEY, email },
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch user data: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('User data:', data);
      
      if (data.users && data.users.length > 0) {
        const userData = data.users[0];
        setUser(userData);
        
        // Fetch domain usage for this user
        await fetchDomainUsage(userData.user_id);
        
        // Fetch credit history for this user
        await fetchCreditHistory(userData.user_id);
      } else {
        setError('User not found');
      }
    } catch (err) {
      console.error('Error fetching user data:', err);
      setError('Failed to load user data');
    } finally {
      setLoading(false);
    }
  };
  
  // Fetch domain usage from API
  const fetchDomainUsage = async (userId: string) => {
    try {
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/domains`,
          method: 'GET',
          params: { api_key: API_KEY, user_id: userId },
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch domain usage: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Domain usage:', data);
      setDomainUsage(data);
    } catch (err) {
      console.error('Error fetching domain usage:', err);
      // Don't set error state here to avoid blocking the whole page
    }
  };

  // Fetch credit history from API
  const fetchCreditHistory = async (userId: string) => {
    try {
      setIsLoadingCreditHistory(true);
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/credits/history`,
          method: 'GET',
          params: { api_key: API_KEY, user_id: userId },
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch credit history: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Credit history:', data);
      
      // Add formatted date to each transaction
      const formattedHistory = data.transactions.map((transaction: CreditTransaction) => ({
        ...transaction,
        date: formatTimestamp(transaction.timestamp),
      }));
      
      setCreditHistory(formattedHistory);
    } catch (err) {
      console.error('Error fetching credit history:', err);
      // Don't set error state here to avoid blocking the whole page
    } finally {
      setIsLoadingCreditHistory(false);
    }
  };
  
  // Format timestamp to readable date
  const formatTimestamp = (timestamp: number) => {
    try {
      return format(new Date(timestamp * 1000), 'MMM d, yyyy h:mm a');
    } catch (err) {
      return 'Invalid date';
    }
  };

  // Handle adding credits to user
  const handleAddCredits = async () => {
    if (!user) return;
    
    try {
      setIsAddingCredits(true);
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/credits/add`,
          method: 'POST',
          params: { api_key: API_KEY },
          data: {
            user_id: user.user_id,
            amount: creditAmount,
          },
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to add credits: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Add credits response:', data);
      
      // Update user data
      await fetchUserData(decodedEmail);
      
      toast({
        title: "Credits Added",
        description: `${creditAmount} credits have been added to the user's account.`,
      });
      
      setShowCreditDialog(false);
    } catch (err) {
      console.error('Error adding credits:', err);
      toast({
        title: "Failed to Add Credits",
        description: "There was an error adding credits to the user's account.",
        variant: "destructive",
      });
    } finally {
      setIsAddingCredits(false);
    }
  };

  // Handle toggling user status (active/inactive)
  const handleToggleStatus = async () => {
    if (!user) return;
    
    const newStatus = user.status === 'active' ? 'inactive' : 'active';
    
    try {
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users/${user.user_id}`,
          method: 'PUT',
          params: { api_key: API_KEY },
          data: {
            status: newStatus,
          },
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update user status: ${response.statusText}`);
      }
      
      // Update user data
      await fetchUserData(decodedEmail);
      
      toast({
        title: "Status Updated",
        description: `User status has been set to ${newStatus}.`,
      });
    } catch (err) {
      console.error('Error updating user status:', err);
      toast({
        title: "Failed to Update Status",
        description: "There was an error updating the user's status.",
        variant: "destructive",
      });
    }
  };

  // Handle deleting user
  const handleDeleteUser = async () => {
    if (!user) return;
    
    if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
      return;
    }
    
    try {
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users/${user.user_id}`,
          method: 'DELETE',
          params: { api_key: API_KEY },
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to delete user: ${response.statusText}`);
      }
      
      toast({
        title: "User Deleted",
        description: "The user has been successfully deleted.",
      });
      
      router.push('/dashboard');
    } catch (err) {
      console.error('Error deleting user:', err);
      toast({
        title: "Failed to Delete User",
        description: "There was an error deleting the user.",
        variant: "destructive",
      });
    }
  };

  // Handle credit amount change
  const handleCreditAmountChange = (value: number) => {
    setCreditAmount(value);
  };
  
  // Initialize edit form with current user data
  const initializeEditForm = () => {
    if (user) {
      setEditedUser({
        status: user.status,
        credits: user.credits,
        plan_type: user.plan_type,
        allow_multiple_domains: user.allow_multiple_domains,
      });
      setShowEditDialog(true);
    }
  };
  
  // Handle form field changes
  const handleEditFormChange = (field: keyof User, value: string | number | boolean) => {
    setEditedUser(prev => ({
      ...prev,
      [field]: value,
    }));
  };
  
  // Update user data
  const handleUpdateUser = async () => {
    if (!user || !editedUser) return;
    
    try {
      setIsUpdatingUser(true);
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users/${user.user_id}`,
          method: 'PUT',
          params: { api_key: API_KEY },
          data: editedUser,
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update user: ${response.statusText}`);
      }
      
      // Update user data
      await fetchUserData(decodedEmail);
      
      toast({
        title: "User updated successfully",
        description: "The user's information has been updated.",
      });
      
      setShowEditDialog(false);
    } catch (err) {
      console.error('Error updating user:', err);
      toast({
        title: "Failed to update user",
        description: "There was an error updating the user's information.",
        variant: "destructive",
      });
    } finally {
      setIsUpdatingUser(false);
    }
  };

  // Handle back button click
  const handleBackClick = () => {
    router.push('/dashboard');
  };

  // Render function
  return (
    <div className="container mx-auto py-6 space-y-6">
      {/* Breadcrumb */}
      <div className="flex justify-between items-center">
        <Breadcrumb className="mb-4">
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/dashboard" className="text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300">Dashboard</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator>
              <ChevronRight className="h-4 w-4 text-indigo-400 dark:text-indigo-600" />
            </BreadcrumbSeparator>
            <BreadcrumbItem>
              <BreadcrumbLink href="/dashboard" className="text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300">Users</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator>
              <ChevronRight className="h-4 w-4 text-indigo-400 dark:text-indigo-600" />
            </BreadcrumbSeparator>
            <BreadcrumbItem>
              <BreadcrumbPage className="text-slate-600 dark:text-slate-400">{decodedEmail}</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
        <Button variant="outline" size="sm" onClick={handleBackClick} className="flex items-center gap-1">
          <ArrowLeft className="h-4 w-4" />
          Back to Users
        </Button>
      </div>

      {/* Loading and Error States */}
      {loading ? (
        <Card className="border-0 shadow-md bg-gradient-to-br from-indigo-50 to-white dark:from-indigo-950 dark:to-gray-900 overflow-hidden">
          <CardContent className="flex flex-col items-center justify-center p-12">
            <Loader2 className="h-12 w-12 animate-spin text-indigo-600 dark:text-indigo-400 mb-4" />
            <p className="text-indigo-600 dark:text-indigo-400">Loading user data...</p>
          </CardContent>
        </Card>
      ) : error ? (
        <Card className="border-0 shadow-md bg-gradient-to-br from-rose-50 to-white dark:from-rose-950 dark:to-gray-900 overflow-hidden">
          <CardContent className="flex flex-col items-center justify-center p-12">
            <AlertCircle className="h-12 w-12 text-rose-600 dark:text-rose-400 mb-4" />
            <h3 className="text-xl font-bold text-rose-600 dark:text-rose-400 mb-2">Error Loading User</h3>
            <p className="text-rose-600 dark:text-rose-400">{error}</p>
          </CardContent>
        </Card>
      ) : (
        <>
          {/* User Profile Card */}
          <Card className="border-0 shadow-md bg-gradient-to-br from-indigo-50 to-white dark:from-indigo-950 dark:to-gray-900 overflow-hidden">
            <CardContent className="p-0">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
                {/* User Info */}
                <div className="space-y-6">
                  <div>
                    <h2 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-violet-600 dark:from-indigo-400 dark:to-violet-400">User Profile</h2>
                    <p className="text-indigo-600 dark:text-indigo-400">User details and account information</p>
                  </div>

                  <div className="grid grid-cols-1 gap-4">
                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Email</Label>
                      <div className="flex items-center">
                        <span className="font-medium">{user?.email}</span>
                        <Button 
                          variant="ghost" 
                          size="icon" 
                          className="h-6 w-6 ml-1 text-indigo-600 dark:text-indigo-400 hover:bg-indigo-50 dark:hover:bg-indigo-900/20"
                          onClick={() => {
                            navigator.clipboard.writeText(user?.email || '');
                            toast({
                              title: "Email Copied",
                              description: "Email address copied to clipboard",
                            });
                          }}
                        >
                          <Copy className="h-3.5 w-3.5" />
                        </Button>
                      </div>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">User ID</Label>
                      <div className="flex items-center">
                        <span className="font-medium text-sm text-slate-700 dark:text-slate-300 truncate max-w-[180px]">{user?.user_id}</span>
                        <Button 
                          variant="ghost" 
                          size="icon" 
                          className="h-6 w-6 ml-1 text-indigo-600 dark:text-indigo-400 hover:bg-indigo-50 dark:hover:bg-indigo-900/20"
                          onClick={() => {
                            navigator.clipboard.writeText(user?.user_id || '');
                            toast({
                              title: "User ID Copied",
                              description: "User ID copied to clipboard",
                            });
                          }}
                        >
                          <Copy className="h-3.5 w-3.5" />
                        </Button>
                      </div>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">API Key</Label>
                      <div className="flex items-center">
                        <span className="font-medium text-sm text-slate-700 dark:text-slate-300 truncate max-w-[180px]">{user?.access_key}</span>
                        <Button 
                          variant="ghost" 
                          size="icon" 
                          className="h-6 w-6 ml-1 text-indigo-600 dark:text-indigo-400 hover:bg-indigo-50 dark:hover:bg-indigo-900/20"
                          onClick={() => {
                            navigator.clipboard.writeText(user?.access_key || '');
                            toast({
                              title: "API Key Copied",
                              description: "API key copied to clipboard",
                            });
                          }}
                        >
                          <Copy className="h-3.5 w-3.5" />
                        </Button>
                      </div>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Status</Label>
                      <Badge 
                        variant="outline"
                        className={`capitalize ${user?.status === 'active' ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400' : 'bg-rose-100 dark:bg-rose-900/30 text-rose-700 dark:text-rose-400'}`}
                      >
                        {user?.status || 'Unknown'}
                      </Badge>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Plan Type</Label>
                      <Badge 
                        variant="outline"
                        className={`capitalize ${getPlanTypeStyles(user?.plan_type || 'free')}`}
                      >
                        {user?.plan_type || 'Free'}
                      </Badge>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Credits</Label>
                      <div className="flex items-center text-sm text-slate-700 dark:text-slate-300">
                        <Coins className="mr-1 h-3.5 w-3.5 text-amber-600 dark:text-amber-400" />
                        {user?.credits || 0}
                      </div>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Multiple Domains</Label>
                      <Badge 
                        variant="outline"
                        className={`${user?.allow_multiple_domains ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400' : 'bg-slate-100 dark:bg-slate-900/30 text-slate-700 dark:text-slate-400'}`}
                      >
                        {user?.allow_multiple_domains ? 'Allowed' : 'Not Allowed'}
                      </Badge>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Created</Label>
                      <div className="flex items-center text-sm text-slate-700 dark:text-slate-300">
                        <CalendarDays className="mr-1 h-3.5 w-3.5 text-indigo-600 dark:text-indigo-400" />
                        {user?.created_at ? formatTimestamp(user.created_at) : 'Unknown'}
                      </div>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <Label className="text-xs text-slate-600 dark:text-slate-400">Last Updated</Label>
                      <div className="flex items-center text-sm text-slate-700 dark:text-slate-300">
                        <Clock className="mr-1 h-3.5 w-3.5 text-indigo-600 dark:text-indigo-400" />
                        {user?.updated_at ? formatTimestamp(user.updated_at) : 'Unknown'}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Domain Usage */}
                <div className="space-y-6">
                  <div>
                    <h2 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-violet-600 dark:from-indigo-400 dark:to-violet-400">Domain Usage</h2>
                    <p className="text-indigo-600 dark:text-indigo-400">Registered domains for this user</p>
                  </div>

                  {domainUsage ? (
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">Total Domains</span>
                        <Badge variant="outline" className="bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-400">
                          {domainUsage.domain_counts ? Object.keys(domainUsage.domain_counts).length : 0}
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <Label className="text-xs text-slate-600 dark:text-slate-400">Registered Domains</Label>
                        {domainUsage.domain_counts && Object.keys(domainUsage.domain_counts).length > 0 ? (
                          <div className="grid grid-cols-1 gap-2">
                            {Object.entries(domainUsage.domain_counts).map(([domain, count]) => (
                              <div key={domain} className="flex items-center justify-between p-2 rounded-md bg-slate-50 dark:bg-slate-900/50">
                                <span className="text-sm font-medium truncate max-w-[150px]">{domain}</span>
                                <Badge variant="outline" className="bg-violet-100 dark:bg-violet-900/30 text-violet-700 dark:text-violet-400">
                                  {count} calls
                                </Badge>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center p-4 border border-dashed rounded-md border-slate-300 dark:border-slate-700">
                            <p className="text-sm text-slate-500 dark:text-slate-400">No domains registered</p>
                          </div>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-center justify-center h-40">
                      <Loader2 className="h-8 w-8 animate-spin text-indigo-600 dark:text-indigo-400" />
                    </div>
                  )}
                </div>

                {/* User Actions */}
                <div className="space-y-6">
                  <div>
                    <h2 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-violet-600 dark:from-indigo-400 dark:to-violet-400">User Actions</h2>
                    <p className="text-indigo-600 dark:text-indigo-400">Manage this user account</p>
                  </div>

                  <div className="space-y-4">
                    <Button 
                      variant="outline" 
                      className="w-full flex items-center justify-center bg-gradient-to-r from-indigo-50 to-white hover:from-indigo-100 hover:to-white dark:from-indigo-950/50 dark:to-gray-900 dark:hover:from-indigo-900/50 dark:hover:to-gray-800 border-indigo-200 dark:border-indigo-800" 
                      onClick={initializeEditForm}
                    >
                      <Edit className="mr-2 h-4 w-4 text-indigo-600 dark:text-indigo-400" />
                      <span className="text-indigo-700 dark:text-indigo-300">Edit User</span>
                    </Button>

                    <Button 
                      variant="outline" 
                      className="w-full flex items-center justify-center bg-gradient-to-r from-amber-50 to-white hover:from-amber-100 hover:to-white dark:from-amber-950/50 dark:to-gray-900 dark:hover:from-amber-900/50 dark:hover:to-gray-800 border-amber-200 dark:border-amber-800" 
                      onClick={() => setShowCreditDialog(true)}
                    >
                      <Plus className="mr-2 h-4 w-4 text-amber-600 dark:text-amber-400" />
                      <span className="text-amber-700 dark:text-amber-300">Add Credits</span>
                    </Button>

                    <Button 
                      variant="outline" 
                      className={`w-full flex items-center justify-center ${user?.status === 'active' 
                        ? 'bg-gradient-to-r from-rose-50 to-white hover:from-rose-100 hover:to-white dark:from-rose-950/50 dark:to-gray-900 dark:hover:from-rose-900/50 dark:hover:to-gray-800 border-rose-200 dark:border-rose-800' 
                        : 'bg-gradient-to-r from-green-50 to-white hover:from-green-100 hover:to-white dark:from-green-950/50 dark:to-gray-900 dark:hover:from-green-900/50 dark:hover:to-gray-800 border-green-200 dark:border-green-800'}`} 
                      onClick={handleToggleStatus}
                    >
                      {user?.status === 'active' ? (
                        <>
                          <X className="mr-2 h-4 w-4 text-rose-600 dark:text-rose-400" />
                          <span className="text-rose-700 dark:text-rose-300">Deactivate User</span>
                        </>
                      ) : (
                        <>
                          <RefreshCw className="mr-2 h-4 w-4 text-green-600 dark:text-green-400" />
                          <span className="text-green-700 dark:text-green-300">Activate User</span>
                        </>
                      )}
                    </Button>

                    <div className="pt-4 border-t border-slate-200 dark:border-slate-800">
                      <h3 className="font-medium mb-1 text-rose-600 dark:text-rose-400">Delete User</h3>
                      <p className="text-sm text-muted-foreground mb-3">Permanently delete this user account</p>
                      <Button 
                        onClick={handleDeleteUser}
                        disabled={isAddingCredits}
                        variant="destructive"
                        className="w-full bg-gradient-to-r from-rose-600 to-red-600 hover:from-rose-700 hover:to-red-700 dark:from-rose-700 dark:to-red-700 dark:hover:from-rose-800 dark:hover:to-red-800"
                      >
                        Delete User
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Credit History Card */}
          <Card className="overflow-hidden border-0 shadow-xl bg-gradient-to-br from-indigo-50 to-white dark:from-indigo-950 dark:to-gray-900">
            <CardHeader>
              <CardTitle className="text-indigo-900 dark:text-indigo-300 font-bold">Credit History</CardTitle>
              <CardDescription className="text-indigo-600 dark:text-indigo-400">
                Transaction history for this user
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isLoadingCreditHistory ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-indigo-600 dark:text-indigo-400" />
                </div>
              ) : creditHistory && creditHistory.length > 0 ? (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Service</TableHead>
                        <TableHead>Amount</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Source Domain</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {creditHistory.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center text-muted-foreground">
                            No credit history found
                          </TableCell>
                        </TableRow>
                      ) : (
                        creditHistory
                          .slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE)
                          .map((transaction, index) => (
                            <TableRow key={index}>
                              <TableCell>{transaction.date || formatTimestamp(transaction.timestamp)}</TableCell>
                              <TableCell>
                                <Badge variant="outline" className="capitalize">
                                  {transaction.service}
                                </Badge>
                              </TableCell>
                              <TableCell>
                                <Badge 
                                  variant={transaction.action_type === 'credit_addition' ? 'default' : 'destructive'}
                                  className={transaction.action_type === 'credit_addition' ? 'bg-green-500 hover:bg-green-600' : ''}
                                >
                                  {transaction.action_type === 'credit_addition' ? '+' : '-'}{Math.abs(transaction.amount)}
                                </Badge>
                              </TableCell>
                              <TableCell className="capitalize">{transaction.status || 'Unknown'}</TableCell>
                              <TableCell className="text-xs">{transaction.source_domain || 'N/A'}</TableCell>
                            </TableRow>
                          ))
                      )}
                    </TableBody>
                  </Table>
                  {creditHistory.length > ITEMS_PER_PAGE && (
                    <div className="flex items-center justify-center space-x-2 py-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setCurrentPage(p => Math.max(p - 1, 1))}
                        disabled={currentPage <= 1}
                      >
                        Previous
                      </Button>
                      <span className="text-sm text-muted-foreground">
                        Page {currentPage} of {Math.ceil(creditHistory.length / ITEMS_PER_PAGE)}
                      </span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setCurrentPage(p => p + 1)}
                        disabled={currentPage >= Math.ceil(creditHistory.length / ITEMS_PER_PAGE)}
                      >
                        Next
                      </Button>
                    </div>
                  )}
                </div>
              ) : (
                <div className="py-8 text-center text-muted-foreground">
                  No credit history found for this user
                </div>
              )}
            </CardContent>
          </Card>
          
          {/* Edit User Dialog */}
          <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Edit User</DialogTitle>
                <DialogDescription>
                  Update the user's account information and settings.
                </DialogDescription>
              </DialogHeader>
              
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="status" className="text-right">
                    Status
                  </Label>
                  <div className="col-span-3">
                    <Select 
                      value={editedUser.status} 
                      onValueChange={(value) => handleEditFormChange('status', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="active">Active</SelectItem>
                        <SelectItem value="inactive">Inactive</SelectItem>
                        <SelectItem value="suspended">Suspended</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="credits" className="text-right">
                    Credits
                  </Label>
                  <div className="col-span-3">
                    <Input
                      id="credits"
                      type="number"
                      value={editedUser.credits}
                      onChange={(e) => handleEditFormChange('credits', Number(e.target.value))}
                      min="0"
                      step="1"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="plan_type" className="text-right">
                    Plan Type
                  </Label>
                  <div className="col-span-3">
                    <Select 
                      value={editedUser.plan_type} 
                      onValueChange={(value) => handleEditFormChange('plan_type', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select plan type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="credit_based">Credit Based</SelectItem>
                        <SelectItem value="subscription">Subscription</SelectItem>
                        <SelectItem value="free">Free</SelectItem>
                        <SelectItem value="enterprise">Enterprise</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="allow_multiple_domains" className="text-right">
                    Multiple Domains
                  </Label>
                  <div className="col-span-3 flex items-center">
                    <Switch 
                      id="allow_multiple_domains"
                      checked={editedUser.allow_multiple_domains}
                      onCheckedChange={(checked) => handleEditFormChange('allow_multiple_domains', checked)}
                    />
                    <span className="ml-2 text-sm text-muted-foreground">
                      {editedUser.allow_multiple_domains ? 'Allowed' : 'Not Allowed'}
                    </span>
                  </div>
                </div>
              </div>
              
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowEditDialog(false)}>Cancel</Button>
                <Button onClick={handleUpdateUser} disabled={isUpdatingUser}>
                  {isUpdatingUser ? (
                    <>
                      <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent"></div>
                      Updating...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Save Changes
                    </>
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          
          {/* Add Credits Dialog */}
          <Dialog open={showCreditDialog} onOpenChange={setShowCreditDialog}>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Add Credits</DialogTitle>
                <DialogDescription>
                  Add credits to the user's account.
                </DialogDescription>
              </DialogHeader>
              
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="creditAmount" className="text-right">
                    Amount
                  </Label>
                  <div className="col-span-3">
                    <Input
                      id="creditAmount"
                      type="number"
                      value={creditAmount}
                      onChange={(e) => handleCreditAmountChange(Number(e.target.value))}
                      min="1"
                      step="1"
                    />
                  </div>
                </div>
              </div>
              
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowCreditDialog(false)}>Cancel</Button>
                <Button onClick={handleAddCredits} disabled={isAddingCredits}>
                  {isAddingCredits ? (
                    <>
                      <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent"></div>
                      Adding...
                    </>
                  ) : (
                    <>
                      <Coins className="mr-2 h-4 w-4" />
                      Add Credits
                    </>
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </>
      )}
    </div>
  );
