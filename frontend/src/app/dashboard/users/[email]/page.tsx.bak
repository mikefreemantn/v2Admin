'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { 
  AlertCircle, 
  Loader2, 
  ArrowLeft,
  ChevronRight,
  RefreshCw,
  Users,
  Copy,
  Coins,
  CalendarDays,
  Clock,
  Key,
  AlertTriangle
} from 'lucide-react';
import { Label } from '@/components/ui/label';
import { getCurrentUser } from 'aws-amplify/auth';
import { configureAmplifyClient } from '@/lib/amplifyClient';
import { Button } from '@/components/ui/button';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Badge } from "@/components/ui/badge";
import { format } from 'date-fns';

// API key for accessing the ReIntent API
const API_KEY = 'ri_5437c19aa7de';
const API_BASE_URL = 'https://xwkwzbjifh.execute-api.us-east-2.amazonaws.com/v1';

// User type definition
interface User {
  user_id: string;
  email: string;
  access_key: string;
  credits: number;
  status: string;
  created_at: number;
  last_active: number;
  allow_multiple_domains: boolean;
}

// Domain usage type definition
interface DomainUsage {
  user_id: string;
  email: string;
  access_key: string;
  domains: string[];
  domain_count: number;
  status: string;
  allow_multiple_domains: boolean;
}

// Credit history transaction type definition
interface CreditTransaction {
  transaction_id?: string;
  timestamp: number;
  amount: number;
  type?: 'deduction' | 'addition' | string;
  description?: string;
  service?: string;
  source_domain?: string;
  action_type?: string;
  status?: string;
  date?: string;
  user_id?: string;
}

export default function UserProfilePage({ params }: { params: { email: string } }) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [creditHistory, setCreditHistory] = useState<CreditTransaction[]>([]);
  const [totalHistoryItems, setTotalHistoryItems] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(true);
  const [domainUsage, setDomainUsage] = useState<DomainUsage | null>(null);
  const [isLoadingCreditHistory, setIsLoadingCreditHistory] = useState(false);
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [creditAmount, setCreditAmount] = useState<number>(10);
  
  const handleCreditAmountChange = (value: number) => {
    setCreditAmount(Math.round(value));
  };
  const [showCreditDialog, setShowCreditDialog] = useState(false);
  
  // Pagination state for credit history
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Decode the email from URL
  const decodedEmail = decodeURIComponent(params.email);

  // Check authentication and fetch user data
  useEffect(() => {
    const checkAuthAndFetchData = async () => {
      try {
        // Ensure Amplify is configured
        configureAmplifyClient();
        
        // Check if user is authenticated
        await getCurrentUser();
        
        // Fetch user data
        await fetchUserData(decodedEmail);
      } catch (err: any) {
        console.error('Authentication error:', err);
        router.push('/login');
      } finally {
        setIsLoading(false);
      }
    };
    
    checkAuthAndFetchData();
  }, [decodedEmail, router]);
  
  // Fetch credit history when user data is loaded
  useEffect(() => {
    if (user && user.user_id) {
      fetchCreditHistory(user.user_id);
    }
  }, [user]);

  // Fetch credit history from API
  const fetchCreditHistory = async (userId: string) => {
    try {
      setIsLoadingCreditHistory(true);
      console.log('Fetching credit history for user ID:', userId);
      
      // Use proxy endpoint to avoid CORS issues with the correct admin endpoint
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users/${userId}/credit-history`,
          method: 'GET',
          apiKey: API_KEY
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch credit history: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Credit history response:', data);
      // Check if the response has the expected format
      if (data.data && data.data.history) {
        setCreditHistory(data.data.history);
        setTotalHistoryItems(data.data.history.length || 0);
      } else if (data.history) {
        // Direct response format
        setCreditHistory(data.history);
        setTotalHistoryItems(data.history.length || 0);
      } else {
        // Fallback
        setCreditHistory([]);
        setTotalHistoryItems(0);
        console.error('Unexpected credit history format:', data);
      }
    } catch (err: any) {
      console.error('Error fetching credit history:', err);
      setError(`Failed to fetch credit history: ${err.message}`);
    } finally {
      setIsLoadingCreditHistory(false);
    }
  };

  // Fetch user data from API
  const fetchUserData = async (email: string) => {
    try {
      setLoading(true);
      console.log('Fetching user data for email:', email);
      
      // Use proxy endpoint to avoid CORS issues with the correct admin endpoint
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users?email=${encodeURIComponent(email)}`,
          method: 'GET',
          apiKey: API_KEY
        }),
      });
      
      if (!response.ok) {
        console.error('API response not OK:', response.status, response.statusText);
        throw new Error(`Failed to fetch user data: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('API response data:', data);
      
      // Handle different response formats
      if (data.data && data.data.users && data.data.users.length > 0) {
        // Proxy wrapped response
        setUser(data.data.users[0]);
        console.log('User found (proxy format):', data.data.users[0]);
      } else if (data.users && data.users.length > 0) {
        // Direct API response
        setUser(data.users[0]);
        console.log('User found (direct format):', data.users[0]);
        
        // Fetch domain usage for the user
        try {
          const userId = data.data?.users?.[0]?.user_id || data.users?.[0]?.user_id;
          console.log('Fetching domain usage for user ID:', userId);
          // Use proxy for domain request as well
          const domainResponse = await fetch('/api/proxy', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              endpoint: `${API_BASE_URL}/admin/domains?user_id=${userId}`,
              method: 'GET',
              apiKey: API_KEY
            }),
          });
          
          if (domainResponse.ok) {
            const domainData = await domainResponse.json();
            console.log('Domain usage data:', domainData);
            
            // Handle different response formats
            if (domainData.data && domainData.data.domain_usage) {
              setDomainUsage(domainData.data.domain_usage);
            } else if (domainData.domain_usage) {
              setDomainUsage(domainData.domain_usage);
            } else {
              console.error('Unexpected domain usage format:', domainData);
            }
          } else {
            console.error('Domain response not OK:', domainResponse.status, domainResponse.statusText);
          }
        } catch (domainErr) {
          console.error('Error fetching domain usage:', domainErr);
        }
      } else {
        console.error('User not found in response:', data);
        setError('User not found');
      }
    } catch (err: any) {
      console.error('Error fetching user data:', err);
      setError(`Failed to fetch user data: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Format timestamp to readable date
  const formatTimestamp = (timestamp: number) => {
    try {
      return format(new Date(timestamp * 1000), 'MMM d, yyyy h:mm a');
    } catch (err) {
      return 'Invalid date';
    }
  };

  // Format credits value
  const formatCredits = (credits: number | string | undefined) => {
    if (credits === undefined) return '0';
    
    const numCredits = typeof credits === 'string' ? parseFloat(credits) : credits;
    
    if (isNaN(numCredits)) return '0';
    
    // Format with commas for thousands
    return new Intl.NumberFormat('en-US').format(numCredits);
  };

  // Handle back button click
  const handleBackClick = () => {
    router.push('/dashboard/users');
  };

  // Handle user status toggle (activate/deactivate)
  const handleToggleStatus = async () => {
    if (!user) return;
    
    try {
      setActionLoading('status');
      
      const newStatus = user.status === 'active' ? 'inactive' : 'active';
      
      // Make API request to update user status
      const response = await fetch('/api/proxy', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/users`,
          method: 'PUT',
          apiKey: API_KEY,
          data: {
            user_id: user.user_id,
            status: newStatus
          }
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update user status: ${response.status}`);
      }
      
      // Update user state with new status
      setUser(prev => {
        if (!prev) return null;
        return { ...prev, status: newStatus };
      });
      
    } catch (err: any) {
      console.error('Error updating user status:', err);
      setError(`Failed to update user status: ${err.message}`);
    } finally {
      setActionLoading(null);
    }
  };
  
  // Handle adding credits to user
  const handleAddCredits = async () => {
    if (!user) return;
    
    try {
      setActionLoading('credits');
      
      // Make API request to add credits
      const response = await fetch('/api/proxy', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/users`,
          method: 'PUT',
          apiKey: API_KEY,
          data: {
            user_id: user.user_id,
            credits: user.credits + creditAmount
          }
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to add credits: ${response.status}`);
      }
      
      // Update user state with new credits
      setUser(prev => {
        if (!prev) return null;
        return { ...prev, credits: prev.credits + creditAmount };
      });
      
      // Fetch updated credit history
      await fetchCreditHistory(user.user_id);
      
      // Hide credit dialog
      setShowCreditDialog(false);
      
    } catch (err: any) {
      console.error('Error adding credits:', err);
      setError(`Failed to add credits: ${err.message}`);
    } finally {
      setActionLoading(null);
    }
  };
  
  // Handle delete user
  const handleDeleteUser = async () => {
    if (!user) return;
    
    if (!confirm(`Are you sure you want to delete user ${user.email}? This action cannot be undone.`)) {
      return;
    }
    
    try {
      setActionLoading('delete');
      
      // Make API request to delete user
      const response = await fetch('/api/proxy', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint: `${API_BASE_URL}/admin/users/${user.user_id}/delete`,
          method: 'DELETE',
          apiKey: API_KEY
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to delete user: ${response.status}`);
      }
      
      // Redirect to users list
      router.push('/dashboard/users');
      
    } catch (err: any) {
      console.error('Error deleting user:', err);
      setError(`Failed to delete user: ${err.message}`);
      setActionLoading(null);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto p-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-2xl">Loading...</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error || !user) {
    return (
      <div className="container mx-auto p-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-2xl">Error</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-destructive">{error || 'User not found'}</p>
          </CardContent>
          <CardFooter>
            <Button onClick={handleBackClick}>Back to Users</Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 space-y-6">
      <Breadcrumb className="mb-6">
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard">Dashboard</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard/users">Users</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>{user.email}</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-3 border-0 shadow-md bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20">
          <CardContent className="p-0">
            <div className="flex flex-col md:flex-row">
              {/* User avatar and basic info */}
              <div className="p-6 md:p-8 flex flex-col md:border-r border-border md:w-1/3 bg-card">
                <div className="flex flex-col items-center md:items-start gap-4 mb-6">
                  <div className="relative">
                    <div className="h-20 w-20 rounded-full bg-primary/10 flex items-center justify-center">
                      <Users className="h-10 w-10 text-primary" />
                    </div>
                    <div className={`absolute -bottom-1 -right-1 h-6 w-6 rounded-full flex items-center justify-center border-2 border-background ${user.status === 'active' ? 'bg-green-500' : 'bg-red-500'}`}>
                      <div className="h-2 w-2 rounded-full bg-background"></div>
                    </div>
                  </div>
                  <div className="text-center md:text-left">
                    <h2 className="text-xl font-bold">{user.email}</h2>
                    <p className="text-muted-foreground text-sm">User ID: {user.user_id}</p>
                  </div>
                </div>

                <div className="grid grid-cols-1 gap-4">
                  <div className="flex flex-col space-y-1">
                    <Label className="text-xs text-muted-foreground">Status</Label>
                    <div className="flex items-center">
                      <Badge variant={user.status === 'active' ? 'default' : 'destructive'} className={`capitalize ${user.status === 'active' ? 'bg-green-500 hover:bg-green-600' : ''}`}>
                        {user.status}
                      </Badge>
                    </div>
                  </div>

                  <div className="flex flex-col space-y-1">
                    <Label className="text-xs text-muted-foreground">Credits</Label>
                    <div className="flex items-center gap-1 font-medium">
                      <Coins className="h-4 w-4 text-amber-500" />
                      {formatCredits(user.credits)}
                    </div>
                  </div>

                  <div className="flex flex-col space-y-1">
                    <Label className="text-xs text-muted-foreground">API Key</Label>
                    <div className="flex items-center gap-2">
                      <code className="bg-muted px-2 py-1 rounded text-xs flex-1 truncate">
                        {user.access_key}
                      </code>
                      <Button 
                        variant="ghost" 
                        size="icon" 
                        className="h-8 w-8"
                        onClick={() => {
                          navigator.clipboard.writeText(user.access_key);
                          alert('API key copied to clipboard');
                        }}
                      >
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  <div className="flex flex-col space-y-1">
                    <Label className="text-xs text-muted-foreground">Created</Label>
                    <div className="flex items-center gap-1 text-sm">
                      <CalendarDays className="h-4 w-4 text-muted-foreground" />
                      {formatTimestamp(user.created_at)}
                    </div>
                  </div>

                  <div className="flex flex-col space-y-1">
                    <Label className="text-xs text-muted-foreground">Last Active</Label>
                    <div className="flex items-center gap-1 text-sm">
                      <Clock className="h-4 w-4 text-muted-foreground" />
                      {formatTimestamp(user.last_active)}
                    </div>
                  </div>

                  <div className="flex flex-col space-y-1">
                    <Label className="text-xs text-muted-foreground">Multiple Domains</Label>
                    <div className="flex items-center gap-1">
                      <Badge variant={user.allow_multiple_domains ? 'outline' : 'secondary'}>
                        {user.allow_multiple_domains ? 'Allowed' : 'Not Allowed'}
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>

              {/* Domain usage section */}
              <div className="p-6 md:p-8 flex-1 bg-background">
                <h3 className="text-lg font-medium mb-4">Domain Usage</h3>
                
                {domainUsage ? (
                  <div>
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-2">
                        <Key className="h-5 w-5 text-primary" />
                        <span className="font-medium">Registered Domains</span>
                      </div>
                      <Badge variant="outline">{domainUsage.domain_count}</Badge>
                    </div>
                    
                    {domainUsage.domains && domainUsage.domains.length > 0 ? (
                      <ul className="space-y-2">
                        {domainUsage.domains.map((domain, index) => (
                          <li key={index} className="flex items-center justify-between p-2 bg-muted/50 rounded-md">
                            <span className="text-sm font-medium">{domain}</span>
                            <ChevronRight className="h-4 w-4 text-muted-foreground" />
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-muted-foreground italic">No domains registered</p>
                    )}
                  </div>
                ) : (
                  <p className="text-muted-foreground italic">No domain usage information available</p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Action Buttons */}
      <Card className="border-0 shadow-md">
        <CardHeader>
          <CardTitle>User Actions</CardTitle>
          <CardDescription>Manage this user account</CardDescription>
        </CardHeader>
        <CardContent>
          {error && (
            <div className="bg-destructive/10 text-destructive p-4 rounded-md mb-4">
              <pre className="whitespace-pre-wrap text-xs font-mono overflow-auto max-h-60">
                {error}
              </pre>
              <Button 
                variant="ghost" 
                size="sm" 
                className="mt-2" 
                onClick={() => setError(null)}
              >
                Dismiss
              </Button>
            </div>
          )}
          
          <div className="flex flex-wrap gap-4">
            {showCreditDialog ? (
              <div className="flex items-center gap-2 w-full">
                <input
                  type="number"
                  value={creditAmount}
                  onChange={(e) => handleCreditAmountChange(parseInt(e.target.value) || 0)}
                  className="flex h-10 w-24 rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  min="1"
                  max="1000"
                />
                <Button 
                  onClick={handleAddCredits} 
                  disabled={actionLoading === 'credits'}
                  className="bg-green-600 hover:bg-green-700"
                  ) : (
                    <p className="text-muted-foreground italic">No domains registered</p>
                  )}
                </div>
              ) : (
                <p className="text-muted-foreground italic">No domain usage information available</p>
                      {user.status === 'active' ? 'Deactivate this user' : 'Activate this user'}
                    </p>
                    <Button 
                      onClick={handleToggleStatus}
                      disabled={actionLoading !== null}
                      variant={user.status === 'active' ? 'destructive' : 'default'}
                      className="w-full"
                    >
                      {actionLoading === 'status' ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          {user.status === 'active' ? 'Deactivating...' : 'Activating...'}
                        </>
                      ) : (
                        user.status === 'active' ? 'Deactivate User' : 'Activate User'
                      )}
                    </Button>
                  </div>
                </div>

                <div className="group relative overflow-hidden rounded-md border bg-background p-1 hover:shadow transition-all duration-200">
                  <div className="p-2">
                    <h3 className="font-medium mb-1">Delete User</h3>
                    <p className="text-sm text-muted-foreground mb-3">Permanently delete this user account</p>
                    <Button 
                      onClick={handleDeleteUser}
                      disabled={actionLoading !== null}
                      variant="destructive"
                      className="w-full"
                    >
                      {actionLoading === 'delete' ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Deleting...
                        </>
                      ) : (
                        'Delete User'
                      )}
                    </Button>
                  </div>
                </div>
              </>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Credit History Card */}
      <Card className="border-0 shadow-md">
        <CardHeader>
          <CardTitle>Credit History</CardTitle>
          <CardDescription>Transaction history for this user</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoadingCreditHistory ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : creditHistory && creditHistory.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">Date</th>
                    <th className="text-left p-2">Service</th>
                    <th className="text-left p-2">Amount</th>
                    <th className="text-left p-2">Status</th>
                    <th className="text-left p-2">Source Domain</th>
                  </tr>
                </thead>
                <tbody>
                  {creditHistory
                    .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)
                    .map((transaction, index) => (
                      <tr key={index} className="border-b hover:bg-muted/50">
                        <td className="p-2 text-sm">{transaction.date || formatTimestamp(transaction.timestamp)}</td>
                        <td className="p-2 text-sm">
                          <span className="px-2 py-1 rounded-full text-xs font-medium bg-slate-100">
                            {transaction.service}
                          </span>
                        </td>
                        <td className="p-2 text-sm font-medium">
                          <span className={transaction.action_type === 'credit_addition' ? 'text-green-600' : 'text-red-600'}>
                            {transaction.action_type === 'credit_addition' ? '+' : '-'}{Math.abs(transaction.amount)}
                          </span>
                        </td>
                        <td className="p-2 text-sm capitalize">{transaction.status || 'Unknown'}</td>
                        <td className="p-2 text-sm text-xs">{transaction.source_domain || 'N/A'}</td>
                      </tr>
                    ))}
                </tbody>
              </table>
              
              {/* Pagination */}
              {creditHistory.length > itemsPerPage && (
                <div className="flex items-center justify-between mt-4">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                  >
                    Previous
                  </Button>
                  
                  <span className="text-sm text-muted-foreground">
                    Page {currentPage} of {Math.ceil(creditHistory.length / itemsPerPage)}
                  </span>
                  
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(p => Math.min(Math.ceil(creditHistory.length / itemsPerPage), p + 1))}
                    disabled={currentPage >= Math.ceil(creditHistory.length / itemsPerPage)}
                  >
                    Next
                  </Button>
                </div>
              )}
            </div>
          ) : (
            <p className="text-muted-foreground italic py-4 text-center">No credit history available</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
